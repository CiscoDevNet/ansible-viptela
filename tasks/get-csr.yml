- include_tasks: get-cookie.yml
  when: viptela_api_cookie is not defined

- name: Check to see if CSR exists
  stat:
    path: "{{ csr_filename }}"
  register: stat_result
  delegate_to: localhost

- name: Get our deviceIP by hostname
  uri:
    url: "https://{{ vmanage_ip }}/dataservice/system/device/controllers"
    method: GET
    headers:
      Cookie: "{{ viptela_api_cookie }}"
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: uri_results
  delegate_to: localhost
  retries: 60
  delay: 10
  until: uri_results is not failed

- set_fact:
    found_device_ip: "{{ uri_results.json.data | selectattr('host-name', 'defined') | selectattr('host-name', 'equalto', device_hostname) | map(attribute='deviceIP') | join('') }}"

- set_fact:
    csr_device_ip: "{{ found_device_ip if found_device_ip else device_ip }}"

- debug: msg="Getting CSR for deviceIP {{ csr_device_ip }}"

- block:
  - name: Get CSR
    uri:
      url: "https://{{ vmanage_ip }}/dataservice/certificate/generate/csr"
      method: POST
      headers:
        Cookie: "{{ viptela_api_cookie }}"
      body_format: json
      body:
        deviceIP: "{{ csr_device_ip }}"
      validate_certs: "{{ validate_certs }}"
      return_content: yes
    register: uri_results
    changed_when: true
    delegate_to: localhost
    retries: 60
    delay: 10
    until: uri_results is not failed

  - set_fact:
      device_csr: "{{ uri_results.json.data[0].deviceCSR }}"
    when: uri_results.json.data[0] is defined

  - copy:
      content: "{{ device_csr }}"
      dest: "{{ csr_filename }}"
    delegate_to: localhost
  when: not stat_result.stat.exists