#This task has the goal of representing the generic workflow for ANY feature template.
#This task is not intended to be run directly in a playbook as standalone task. It is supposed to be included from a parent task.
#Examples of parent tasks are the ones specific for a type of feature template, e.g. banner.
#Once a parent tasks includes this generic task some variables have to be passed, e.g. loop_over,folder and template.
#
#template_list: list of templates to be manipulated
#folder: where to store the json file of the rendered template
#template: jinja template to be used to render the final template
#
#At high level this tasks first removes all the previously rendered templates from the filesystem, then it renders the
#new ones and saves them in $folder. The tasks renders only the template with state present. We then load from
#filesystem the templates that we have just rendered, this is due to the fact that the template module is not able to
#generate facts with the rendered content. On the other side this enables multi-staged actions, meaning that we can perform
#the rendering and the upload at different phases. Once we have loaded the files we then pass them as input to the ansible module
#using the aggregate parameter for bulk operations.
#
#There are also tasks that create a list of templates with the state absent. We finally pass this list to the ansible module.

- name: Clean rendered templates
  file:
    path: "{{item}}"
    state: absent
    force: true
  run_once: True
  with_fileglob:
    - "{{role_path}}/files/rendered_templates/{{ folder }}/*"

- name: Render template
  template: src={{ template }} dest={{role_path}}/files/rendered_templates/{{ folder }}/{{ item.templateName }}.json
  when: item.state  != "ignore" and item.state  != "absent"
  with_items: "{{ template_list }}"

# reference here: https://stackoverflow.com/questions/29399581/using-set-facts-and-with-items-together-in-ansible

- name: Loading templates from filesystem
  set_fact:
    generic_template: "{{lookup('file', '{{item}}') }}"
  with_fileglob:
     - "{{role_path}}/files/rendered_templates/{{ folder }}/*.json"
  register: generic_template_registered_list

- name: Creating a list of templates
  set_fact:
    present_feature_list: "{{ generic_template_registered_list.results | map(attribute = 'ansible_facts.generic_template') | list }}"

- name: Creating an empty list of templates to be removed
  set_fact:
    absent_template_list: []
  no_log: True

- name: Creating a list of templates to be removed
  set_fact:
    absent_template_list: "{{ absent_template_list|default([]) + [ {'templateName': item.templateName } ] }}"
  when: item.state  == "absent"
  with_items: "{{ template_list }}"

#- vmanage_feature_template:
#    user: "admin"
#    host: "localhost:8443"
#    password: "admin"
#    state: present
#    name: "{{ item.templateName }}"
#    description: "{{ item.templateDescription }}"
#    definition: "{{ item.templateDefinition }}"
#    template_type: "{{ item.templateType }}"
#    device_type: "{{ item.deviceType }}"
#    template_min_version:  "{{ item.templateMinVersion }}"
#    factory_default: "{{ item.factoryDefault }}"
#  loop: "{{feature_banner_list}}"

- name: Interact with the vManage to create templates
  vmanage_feature_template:
    user: "{{ansible_user}}"
    host: "{{ansible_host}}:{{ansible_port}}"
    password: "{{ansible_password}}"
    state: present
    aggregate: "{{present_feature_list}}"
  when: present_feature_list

- name: Interact with the vManage to delete templates
  vmanage_feature_template:
    user: "{{ansible_user}}"
    host: "{{ansible_host}}:{{ansible_port}}"
    password: "{{ansible_password}}"
    state: absent
    aggregate: "{{absent_template_list}}"
  when: absent_template_list